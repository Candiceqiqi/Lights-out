{"ast":null,"code":"import _slicedToArray from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      board: _this.createBoard(),\n      hasWon: false\n    };\n    _this.flipCellsAroundMe = _this.flipCellsAroundMe.bind(_assertThisInitialized(_assertThisInitialized(_this))); // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this2 = this;\n\n      // let intBoard = new Array(this.props.nrows).fill(new Array(this.props.ncols));\n      var intBoard = Array(this.props.nrows).fill().map(function () {\n        return Array(_this2.props.ncols).fill().map(function () {\n          return undefined;\n        });\n      });\n      console.log(intBoard); //  console.log(intBoard[0][0]);\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        for (var j = 0; j < this.props.ncols; j++) {\n          intBoard[i][j] = Math.random() > this.props.chanceLightStartsOn ? \".\" : \"o\";\n          console.log(i + \"---\" + j + \":::\" + intBoard[i][j]);\n        }\n      } // TODO: create array-of-arrays of true/false values\n\n\n      return intBoard;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAroundMe\",\n    value: function flipCellsAroundMe(coord) {\n      console.log(\"flippping!!!!!\");\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      this.setState(this.flipCell([y, x]));\n    }\n  }, {\n    key: \"flipCell\",\n    value: function flipCell(y, x) {\n      var _this3 = this;\n\n      //   // if this coord is actually on board, flip it\n      //           let currBoard=this.state.board;\n      //    if (x >= 0 && x < this.props.ncols && y >= 0 && y < this.props.nrows) {\n      //       this.state.board[y][x] = !this.state.board[y][x];\n      //     }\n      //   // TODO: flip this cell and the cells around it\n      //     if (x >= 0 && x < this.props.ncols && y >= 0 && y+1 < this.props.nrows) {\n      //       this.state.board[y+1][x] = !this.state.board[y+1][x];\n      //     }\n      //     if (x >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n      //       this.state.board[y-1][x] = !this.state.board[y-1][x];\n      //     }\n      //     if (x >= 0 && x+1 < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n      //       this.state.board[y][x+1] = !this.state.board[y][x+1];\n      //     }\n      //     if (x-1 >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n      //       this.state.board[y][x-1] = !this.state.board[y][x-1];\n      //     }\n      //     this.state.hasWon=(()=>{for(let i=0; i<this.props.ncols;i++ ){\n      //       for(let j=0;j<this.props.nrows;j++){\n      //         if(!this.state.board[i][j])\n      //             return false;\n      //       }\n      //     }\n      //     return true;\n      //   })\n      // // win when every cell is turned off\n      // // TODO: determine is the game has been won\n      // if this coord is actually on board, flip it\n      var currBoard = this.state.board;\n\n      if (x >= 0 && x < this.props.ncols && y >= 0 && y < this.props.nrows) {\n        currBoard[y][x] = !currBoard[y][x];\n      } // TODO: flip this cell and the cells around it\n\n\n      if (x >= 0 && x < this.props.ncols && y >= 0 && y + 1 < this.props.nrows) {\n        currBoard[y + 1][x] = !currBoard[y + 1][x];\n      }\n\n      if (x >= 0 && x < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n        currBoard[y - 1][x] = !currBoard[y - 1][x];\n      }\n\n      if (x >= 0 && x + 1 < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n        currBoard[y][x + 1] = !currBoard[y][x + 1];\n      }\n\n      if (x - 1 >= 0 && x < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n        currBoard[y][x - 1] = !currBoard[y][x - 1];\n      }\n\n      var upddateWon = function upddateWon() {\n        for (var i = 0; i < _this3.props.ncols; i++) {\n          for (var j = 0; j < _this3.props.nrows; j++) {\n            if (!_this3.state.board[i][j]) return false;\n          }\n        }\n\n        return true;\n      }; // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n\n      return {\n        currBoard: currBoard,\n        upddateWon: upddateWon\n      };\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var renderBoard = function renderBoard() {\n        console.log(\"renderiing\");\n        var board = _this4.state.board;\n        var cells = [];\n\n        for (var i = 0; i < _this4.props.ncols; i++) {\n          for (var j = 0; j < _this4.props.nrows; j++) {\n            board[i][j] === \"o\" ? cells.push(React.createElement(Cell, {\n              isLit: true,\n              coord: i + \"-\" + j,\n              flipCellsAroundMe: _this4.flipCellsAroundMe,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 170\n              },\n              __self: this\n            })) : cells.push(React.createElement(Cell, {\n              isLit: false,\n              coord: i + \"-\" + j,\n              flipCellsAroundMe: _this4.flipCellsAroundMe,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171\n              },\n              __self: this\n            }));\n          }\n\n          cells.push(React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }));\n        }\n\n        return cells;\n      };\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, renderBoard());\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 6,\n  ncols: 6,\n  chanceLightStartsOn: 0.8\n};\nexport default Board;","map":{"version":3,"sources":["/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","createBoard","hasWon","flipCellsAroundMe","bind","intBoard","Array","nrows","fill","map","ncols","undefined","console","log","i","j","Math","random","chanceLightStartsOn","coord","split","Number","y","x","setState","flipCell","currBoard","upddateWon","renderBoard","cells","push","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n\n    nrows: 6,\n    ncols: 6,\n    chanceLightStartsOn: 0.8\n\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.createBoard(),\n      hasWon: false\n\n    }\n    this.flipCellsAroundMe = this.flipCellsAroundMe.bind(this);\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    // let intBoard = new Array(this.props.nrows).fill(new Array(this.props.ncols));\n    let intBoard = Array(this.props.nrows).fill().map(() => Array(this.props.ncols).fill().map(() => undefined))\n    console.log(intBoard);\n\n    //  console.log(intBoard[0][0]);\n    for (let i = 0; i < this.props.nrows; i++) {\n      for (let j = 0; j < this.props.ncols; j++) {\n        intBoard[i][j] = (Math.random() > this.props.chanceLightStartsOn) ? \".\" : \"o\";\n        console.log(i + \"---\" + j + \":::\" + intBoard[i][j]);\n      }\n    }\n    // TODO: create array-of-arrays of true/false values\n    return intBoard;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAroundMe(coord) {\n    console.log(\"flippping!!!!!\");\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    this.setState(this.flipCell([y, x]));\n\n  }\n  flipCell(y, x) {\n    //   // if this coord is actually on board, flip it\n    //           let currBoard=this.state.board;\n    //    if (x >= 0 && x < this.props.ncols && y >= 0 && y < this.props.nrows) {\n    //       this.state.board[y][x] = !this.state.board[y][x];\n\n    //     }\n    //   // TODO: flip this cell and the cells around it\n\n    //     if (x >= 0 && x < this.props.ncols && y >= 0 && y+1 < this.props.nrows) {\n    //       this.state.board[y+1][x] = !this.state.board[y+1][x];\n\n    //     }\n    //     if (x >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n    //       this.state.board[y-1][x] = !this.state.board[y-1][x];\n\n    //     }\n    //     if (x >= 0 && x+1 < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n    //       this.state.board[y][x+1] = !this.state.board[y][x+1];\n\n    //     }\n    //     if (x-1 >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n    //       this.state.board[y][x-1] = !this.state.board[y][x-1];\n\n    //     }\n\n    //     this.state.hasWon=(()=>{for(let i=0; i<this.props.ncols;i++ ){\n    //       for(let j=0;j<this.props.nrows;j++){\n    //         if(!this.state.board[i][j])\n    //             return false;\n    //       }\n    //     }\n    //     return true;\n    //   })\n    // // win when every cell is turned off\n    // // TODO: determine is the game has been won\n\n\n    // if this coord is actually on board, flip it\n    let currBoard = this.state.board;\n    if (x >= 0 && x < this.props.ncols && y >= 0 && y < this.props.nrows) {\n      currBoard[y][x] = !currBoard[y][x];\n\n    }\n    // TODO: flip this cell and the cells around it\n\n    if (x >= 0 && x < this.props.ncols && y >= 0 && y + 1 < this.props.nrows) {\n      currBoard[y + 1][x] = !currBoard[y + 1][x];\n\n    }\n    if (x >= 0 && x < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n      currBoard[y - 1][x] = !currBoard[y - 1][x];\n\n    }\n    if (x >= 0 && x + 1 < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n      currBoard[y][x + 1] = !currBoard[y][x + 1];\n\n    }\n    if (x - 1 >= 0 && x < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n      currBoard[y][x - 1] = !currBoard[y][x - 1];\n\n    }\n\n    let upddateWon = (() => {\n      for (let i = 0; i < this.props.ncols; i++) {\n        for (let j = 0; j < this.props.nrows; j++) {\n          if (!this.state.board[i][j])\n            return false;\n        }\n      }\n      return true;\n    });\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    return { currBoard, upddateWon };\n  }\n\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    \n    let renderBoard = () => {\n      console.log(\"renderiing\");\n      let board=this.state.board;\n      let cells = [];\n      for (let i = 0; i < this.props.ncols; i++) {\n        for (let j = 0; j < this.props.nrows; j++) {\n          board[i][j] === \"o\" ?\n            cells.push(<Cell isLit={true} coord={i + \"-\" + j} flipCellsAroundMe={this.flipCellsAroundMe} />) :\n            cells.push(<Cell isLit={false} coord={i + \"-\" + j} flipCellsAroundMe={this.flipCellsAroundMe} />);\n\n        }\n        cells.push(<br></br>);\n      }\n      return cells;\n    };\n\n    return (\n      <div>{renderBoard()}</div>\n\n\n    );\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}