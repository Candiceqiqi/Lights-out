{"ast":null,"code":"import _slicedToArray from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      board: _this.createBoard(),\n      hasWon: false\n    };\n    _this.click = _this.click.bind(_assertThisInitialized(_assertThisInitialized(_this))); // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var intBoard = new Array(this.props.nrows).fill(new Array(this.props.ncols));\n      intBoard[0][0] = \"yesss\";\n      console.log(intBoard[0][0]);\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        for (var j = 0; j < this.props.ncols; j++) {//  intBoard[i][j]=(Math.random()>this.props.chanceLightStartsOn)?false:true;\n        }\n      } // TODO: create array-of-arrays of true/false values\n\n\n      return intBoard;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAroundMe\",\n    value: function flipCellsAroundMe(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      this.setState(this.flipCell([y, x]));\n    }\n  }, {\n    key: \"flipCell\",\n    value: function flipCell(y, x) {\n      var _this2 = this;\n\n      //   // if this coord is actually on board, flip it\n      //           let currBoard=this.state.board;\n      //    if (x >= 0 && x < this.props.ncols && y >= 0 && y < this.props.nrows) {\n      //       this.state.board[y][x] = !this.state.board[y][x];\n      //     }\n      //   // TODO: flip this cell and the cells around it\n      //     if (x >= 0 && x < this.props.ncols && y >= 0 && y+1 < this.props.nrows) {\n      //       this.state.board[y+1][x] = !this.state.board[y+1][x];\n      //     }\n      //     if (x >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n      //       this.state.board[y-1][x] = !this.state.board[y-1][x];\n      //     }\n      //     if (x >= 0 && x+1 < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n      //       this.state.board[y][x+1] = !this.state.board[y][x+1];\n      //     }\n      //     if (x-1 >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n      //       this.state.board[y][x-1] = !this.state.board[y][x-1];\n      //     }\n      //     this.state.hasWon=(()=>{for(let i=0; i<this.props.ncols;i++ ){\n      //       for(let j=0;j<this.props.nrows;j++){\n      //         if(!this.state.board[i][j])\n      //             return false;\n      //       }\n      //     }\n      //     return true;\n      //   })\n      // // win when every cell is turned off\n      // // TODO: determine is the game has been won\n      // if this coord is actually on board, flip it\n      var currBoard = this.state.board;\n\n      if (x >= 0 && x < this.props.ncols && y >= 0 && y < this.props.nrows) {\n        currBoard[y][x] = !currBoard[y][x];\n      } // TODO: flip this cell and the cells around it\n\n\n      if (x >= 0 && x < this.props.ncols && y >= 0 && y + 1 < this.props.nrows) {\n        currBoard[y + 1][x] = !currBoard[y + 1][x];\n      }\n\n      if (x >= 0 && x < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n        currBoard[y - 1][x] = !currBoard[y - 1][x];\n      }\n\n      if (x >= 0 && x + 1 < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n        currBoard[y][x + 1] = !currBoard[y][x + 1];\n      }\n\n      if (x - 1 >= 0 && x < this.props.ncols && y - 1 >= 0 && y < this.props.nrows) {\n        currBoard[y][x - 1] = !currBoard[y][x - 1];\n      }\n\n      var upddateWon = function upddateWon() {\n        for (var i = 0; i < _this2.props.ncols; i++) {\n          for (var j = 0; j < _this2.props.nrows; j++) {\n            if (!_this2.state.board[i][j]) return false;\n          }\n        }\n\n        return true;\n      }; // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n\n      return {\n        currBoard: currBoard,\n        upddateWon: upddateWon\n      };\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 3,\n  ncols: 3,\n  chanceLightStartsOn: 0.2\n};\nexport default Board;","map":{"version":3,"sources":["/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","createBoard","hasWon","click","bind","intBoard","Array","nrows","fill","ncols","console","log","i","j","coord","split","map","Number","y","x","setState","flipCell","currBoard","upddateWon","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n    static defaultProps={\n\n      nrows:3,\n      ncols:3,\n      chanceLightStartsOn:0.2\n\n    }\n  constructor(props) {\n    super(props);\n    this.state={\n      board: this.createBoard(),\n      hasWon:false\n      \n    }\n      this.click=this.click.bind(this);\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let intBoard=new Array(this.props.nrows).fill(new Array(this.props.ncols));\n    intBoard[0][0]=\"yesss\";\n    console.log(intBoard[0][0]);\n    for(let i=0;i<this.props.nrows;i++){\n      for(let j=0;j<this.props.ncols;j++){\n         //  intBoard[i][j]=(Math.random()>this.props.chanceLightStartsOn)?false:true;\n      }\n    }\n    // TODO: create array-of-arrays of true/false values\n    return intBoard;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAroundMe(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    this.setState(this.flipCell([y,x]));\n\n  }\n    flipCell(y, x) {\n    //   // if this coord is actually on board, flip it\n    //           let currBoard=this.state.board;\n    //    if (x >= 0 && x < this.props.ncols && y >= 0 && y < this.props.nrows) {\n    //       this.state.board[y][x] = !this.state.board[y][x];\n          \n    //     }\n    //   // TODO: flip this cell and the cells around it\n\n    //     if (x >= 0 && x < this.props.ncols && y >= 0 && y+1 < this.props.nrows) {\n    //       this.state.board[y+1][x] = !this.state.board[y+1][x];\n          \n    //     }\n    //     if (x >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n    //       this.state.board[y-1][x] = !this.state.board[y-1][x];\n          \n    //     }\n    //     if (x >= 0 && x+1 < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n    //       this.state.board[y][x+1] = !this.state.board[y][x+1];\n          \n    //     }\n    //     if (x-1 >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n    //       this.state.board[y][x-1] = !this.state.board[y][x-1];\n          \n    //     }\n        \n    //     this.state.hasWon=(()=>{for(let i=0; i<this.props.ncols;i++ ){\n    //       for(let j=0;j<this.props.nrows;j++){\n    //         if(!this.state.board[i][j])\n    //             return false;\n    //       }\n    //     }\n    //     return true;\n    //   })\n    // // win when every cell is turned off\n    // // TODO: determine is the game has been won\n        \n   \n      // if this coord is actually on board, flip it\n      let currBoard=this.state.board;\n      if (x >= 0 && x < this.props.ncols && y >= 0 && y < this.props.nrows) {\n        currBoard[y][x] = !currBoard[y][x];\n         \n       }\n     // TODO: flip this cell and the cells around it\n\n       if (x >= 0 && x < this.props.ncols && y >= 0 && y+1 < this.props.nrows) {\n        currBoard[y+1][x] = !currBoard[y+1][x];\n         \n       }\n       if (x >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n        currBoard[y-1][x] = !currBoard[y-1][x];\n         \n       }\n       if (x >= 0 && x+1 < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n        currBoard[y][x+1] = !currBoard[y][x+1];\n         \n       }\n       if (x-1 >= 0 && x < this.props.ncols && y-1 >= 0 && y< this.props.nrows) {\n        currBoard[y][x-1] = !currBoard[y][x-1];\n         \n       }\n       \n       let upddateWon=(()=>{for(let i=0; i<this.props.ncols;i++ ){\n         for(let j=0;j<this.props.nrows;j++){\n           if(!this.state.board[i][j])\n               return false;\n         }\n       }\n       return true;\n     });\n   // win when every cell is turned off\n   // TODO: determine is the game has been won\n       return {currBoard, upddateWon};\n  }\n \n\n\n  /** Render game board or winning message. */\n\n render() {\n   return (\n      <div>\n       <Cell />\n      </div>\n   );\n }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}