{"ast":null,"code":"import _slicedToArray from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      board: _this.createBoard(),\n      hasWon: false // TODO: set initial state\n\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var intBoard = [this.props.nrows][this.props.ncols];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        for (var j = 0; j < this.props.ncols; j++) {//  intBoard[i][j]=(Math.random()>this.props.chanceLightStartsOn)?false:true;\n        }\n      } // TODO: create array-of-arrays of true/false values\n\n\n      return intBoard;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n    }\n  }, {\n    key: \"flipCell\",\n    value: function flipCell(y, x) {} // if this coord is actually on board, flip it\n    //  if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n    //     this.state.board[y][x] = !this.state.board[y][x];\n    //   }\n    // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    //  this.setState({board, hasWon});\n\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 3,\n  ncols: 3,\n  chanceLightStartsOn: 0.2\n};\nexport default Board;","map":{"version":3,"sources":["/Users/siqiluo/Desktop/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","createBoard","hasWon","intBoard","nrows","ncols","i","j","coord","split","map","Number","y","x","defaultProps","chanceLightStartsOn"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AASJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAW;AACTC,MAAAA,KAAK,EAAE,MAAKC,WAAL,EADE;AAETC,MAAAA,MAAM,EAAC,KAFE,CAMX;;AANW,KAAX;AAFiB;AASlB;AAED;;;;;kCAEc;AACZ,UAAIC,QAAQ,GAAC,CAAC,KAAKL,KAAL,CAAWM,KAAZ,EAAmB,KAAKN,KAAL,CAAWO,KAA9B,CAAb;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKR,KAAL,CAAWM,KAAzB,EAA+BE,CAAC,EAAhC,EAAmC;AACjC,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKT,KAAL,CAAWO,KAAzB,EAA+BE,CAAC,EAAhC,EAAmC,CAChC;AACF;AACF,OANW,CAOZ;;;AACA,aAAOJ,QAAP;AACD;AAED;;;;oCAEgBK,K,EAAO;AAAA,wBACA,KAAKV,KADL;AAAA,UAChBO,KADgB,eAChBA,KADgB;AAAA,UACTD,KADS,eACTA,KADS;AAErB,UAAIJ,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAFqB,6BAGRQ,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;AAKtB;;;6BACUD,C,EAAGC,C,EAAG,CAchB,C,CAbG;AAEF;AACD;AACA;AAGC;AAEA;AACA;AAEF;;AAIA;;;;6BAEQ;AACP,aACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADH;AAKD;;;;EAlEkBlB,S;;AAAdE,K,CAEKiB,Y,GAAa;AAElBV,EAAAA,KAAK,EAAC,CAFY;AAGlBC,EAAAA,KAAK,EAAC,CAHY;AAIlBU,EAAAA,mBAAmB,EAAC;AAJF,C;AAoExB,eAAelB,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n    static defaultProps={\n\n      nrows:3,\n      ncols:3,\n      chanceLightStartsOn:0.2\n\n    }\n  constructor(props) {\n    super(props);\n    this.state={\n      board: this.createBoard(),\n      hasWon:false\n      \n    }\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let intBoard=[this.props.nrows][this.props.ncols];\n    for(let i=0;i<this.props.nrows;i++){\n      for(let j=0;j<this.props.ncols;j++){\n         //  intBoard[i][j]=(Math.random()>this.props.chanceLightStartsOn)?false:true;\n      }\n    }\n    // TODO: create array-of-arrays of true/false values\n    return intBoard;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n  }\n    flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n    //  if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n   //     this.state.board[y][x] = !this.state.board[y][x];\n   //   }\n    \n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n  //  this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n render() {\n   return (\n      <div>\n       <Cell />\n      </div>\n   );\n }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}